
name: au

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "master" branch
  push:
    branches: [ "master" ]

  schedule:
    - cron: '15 */4 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  au_version: ''
  au_push: true
  # Force test: use 1 to test all, or N to split testing into N groups
  au_test_groups: 1
  
  # ID of the gist used to save run results - create a gist under the github_user (secret or not) and grab the id - https://gist.github.com/name/id
  # Optional, leave empty to create anonymous gist
  gist_id: a569e20fa01812b6a86bd6d0c3663614
  
  # Force test: gist id for test results
  gist_id_test: 49f0a08f742516f9384f43bd16f1d02a

  api_key: {{ $secrets.API_KEY }}

jobs:
  update:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v3
    
    - name: git config
      run: |
        git config --global user.email "chocolatey@realdimensions.net"
        git config --global user.name "Chocolatey"
        git config --global core.safecrlf false
    
    - name: Install AU
      shell: pwsh
      run: |
        Get-CimInstance win32_operatingsystem -Property Caption, OSArchitecture, Version | fl Caption, OSArchitecture, Version
        $PSVersionTable
        git --version
        choco --version
        git clone -q https://github.com/majkinetor/au.git $env:TEMP/au
        . "$env:TEMP/au/scripts/Install-AU.ps1" $env:au_version
        
        "Build Info"
        '  {0,-20} {1}' -f 'SCHEDULED BUILD:', ($env:GITHUB_EVENT_NAME  -eq 'schedule'         )
        '  {0,-20} {1}' -f 'FORCED BUILD:'   , ($env:GITHUB_EVENT_NAME  -eq 'workflow_dispatch')
        '  {0,-20} {1}' -f 'RE BUILD:'       , ($env:GITHUB_RUN_ATTEMPT -gt  2                 )
    
    - name: update all
      shell: pwsh
      run: |
        $ErrorActionPreference = 'Continue'

        if ('{{}}'  -like '*test*') { ./test_all.ps1 "random $env:au_test_groups"; return }

        if ( ($env:GITHUB_EVENT_NAME -ne 'schedule') -and ($env:GITHUB_EVENT_NAME -ne 'workflow_dispatch') ) {
          switch -regex ('${{ github.event.head_commit.message }}') {
            '\[AU (.+?)\]'   { $forced = $Matches[1] }

            '\[PUSH (.+?)\]' {
                $packages = $Matches[1] -split ' '
                Write-Host "PUSHING PACKAGES: $packages"
                foreach ($package in $packages) {
                    Write-Host ("{0}`n{1}`n" -f ('-'*60), "PACKAGE: $package")
                    $package_dir = ls -recurse | ? { $_.Name -eq "$package.nuspec"} | select -First 1 | % Directory
                    if (!$package_dir) { Write-Warning "Can't find package '$package'"; continue }
                    pushd $package_dir
                      if (Test-Path update.ps1 -ea 0) { ./update.ps1 }
                      choco pack; Push-Package;
                    popd
              }
                return
            }
          }
        }

        ./update_all.ps1 -ForcedPackages $forced
        7z a au_temp.zip $env:TEMP\chocolatey\au\*
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: au results
        path: |
            update_info.xml
            Update-AUPackages.md
            au_temp.zip

name: au

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "master" branch
  push:
    branches: [ "master" ]

  schedule:
    - cron: '15 */4 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  au_version: ''
  au_push: true
  # Force test: use 1 to test all, or N to split testing into N groups
  au_test_groups: 1
  
  # ID of the gist used to save run results - create a gist under the github_user (secret or not) and grab the id - https://gist.github.com/name/id
  # Optional, leave empty to create anonymous gist
  gist_id: a569e20fa01812b6a86bd6d0c3663614
  
  # Force test: gist id for test results
  gist_id_test: 49f0a08f742516f9384f43bd16f1d02a

  api_key: {{ $secrets.API_KEY }}

jobs:
  update:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v3
    
    - name: git config
      run: |
        git config --global user.email "chocolatey@realdimensions.net"
        git config --global user.name "Chocolatey"
        git config --global core.safecrlf false
    
    - name: Install AU
      shell: pwsh
      run: |
        Get-CimInstance win32_operatingsystem -Property Caption, OSArchitecture, Version | fl Caption, OSArchitecture, Version
        $PSVersionTable
        git --version
        choco --version
        git clone -q https://github.com/majkinetor/au.git $env:TEMP/au
        . "$env:TEMP/au/scripts/Install-AU.ps1" $env:au_version
        
        "Build Info"
        '  {0,-20} {1}' -f 'SCHEDULED BUILD:', ($env:GITHUB_EVENT_NAME  -eq 'schedule'         )
        '  {0,-20} {1}' -f 'FORCED BUILD:'   , ($env:GITHUB_EVENT_NAME  -eq 'workflow_dispatch')
        '  {0,-20} {1}' -f 'RE BUILD:'       , ($env:GITHUB_RUN_ATTEMPT -gt  2                 )
    
    - name: update all
      shell: pwsh
      run: |
        $ErrorActionPreference = 'Continue'

        if ('{{}}'  -like '*test*') { ./test_all.ps1 "random $env:au_test_groups"; return }

        if ( ($env:GITHUB_EVENT_NAME -ne 'schedule') -and ($env:GITHUB_EVENT_NAME -ne 'workflow_dispatch') ) {
          switch -regex ('${{ github.event.head_commit.message }}') {
            '\[AU (.+?)\]'   { $forced = $Matches[1] }

            '\[PUSH (.+?)\]' {
                $packages = $Matches[1] -split ' '
                Write-Host "PUSHING PACKAGES: $packages"
                foreach ($package in $packages) {
                    Write-Host ("{0}`n{1}`n" -f ('-'*60), "PACKAGE: $package")
                    $package_dir = ls -recurse | ? { $_.Name -eq "$package.nuspec"} | select -First 1 | % Directory
                    if (!$package_dir) { Write-Warning "Can't find package '$package'"; continue }
                    pushd $package_dir
                      if (Test-Path update.ps1 -ea 0) { ./update.ps1 }
                      choco pack; Push-Package;
                    popd
              }
                return
            }
          }
        }

        ./update_all.ps1 -ForcedPackages $forced
        7z a au_temp.zip $env:TEMP\chocolatey\au\*
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: au results
        path: |
            update_info.xml
            Update-AUPackages.md
            au_temp.zip
